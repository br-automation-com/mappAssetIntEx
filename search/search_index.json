{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is a substitute for the official mappAssetInt package. The goal is to provide a community version that almost matches the official version. </p>"},{"location":"index.html#compatibility","title":"Compatibility","text":"<p>Here is a short list of differences between the official mappAssetInt and the community version. For the detailed description see the compatibility page.</p>"},{"location":"index.html#what-is-missing","title":"What is missing","text":"<ul> <li>There is no configuration file in Automation Studio under the configuration view. The configuration is done through code.</li> <li>There is no integration for mappAlarmX. Since the official version only supported 3 alarms this was removed. The community version provides a rich set of status information that can be used to trigger alarms. See appendix for the corresponding error numbers and the FAQ for more information.</li> </ul>"},{"location":"index.html#what-is-different","title":"What is different","text":"<ul> <li>The beginning of all function block names was changed from Mp to ex. For example MpAssetIntCore was changed to exAssetIntCore.</li> <li>The beginning of all data type names was changed from Mp to ex. For example MpAssetIntCoreInfoType was changed to exAssetIntCoreInfoType. The new structures are identical to the official structures. All exceptions are documented in the compatibility page.</li> <li>Instead of the MpLink all function blocks use a pointer to a remanent variable of type exAssetIntLinkType. This structure is used for cross function block communication.</li> <li>All data is stored in a ring buffer consisting of individual files. Each file contains one event. An event can be job or shift change or a downtime event. You can find more details about the data management in the appendix.</li> </ul>"},{"location":"index.html#what-is-new","title":"What is new","text":"<ul> <li>Most function blocks have an additional Logger input. This is used to log messages to the console. This is useful for debugging purposes.</li> </ul>"},{"location":"index.html#future-development","title":"Future development","text":"<p>The goal for version 1.x is to have a complete set of functions that match the official mappAssetInt package. Version 2.x will focus on adding new features and improvements and will be optimized to work with mappView.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<p>The sample was developed with Automation Studio 4.12 but may also work with versions below that.</p>"},{"location":"appendix.html","title":"Appendix","text":""},{"location":"appendix.html#appendix","title":"Appendix","text":""},{"location":"appendix.html#how-the-data-is-stored","title":"How the data is stored","text":"<p>Short term data like piece counters are stored in the remanent variable of type <code>exAssetIntLinkType</code>. This structure is used for cross function block communication. The short term data will survive a power off but not a cold reboot. </p> <p>All long term data is stored in a ring buffer consisting of individual files on the user partition. The data is spread over multiple directories to speed up the reading process during boot-up. Data on this user partition will survive restarts and even program updates and be backed up if necessary. Each file contains one event. An event can be job or shift change or a downtime event. The total number of stored events can be adjusted with the constant <code>CORE_EVENT_NUM_MAX</code>. Keep in mind that all events must be loaded on boot-up which can take some time. As a ball park figure, it takes about 4 seconds to load 100 events.</p>"},{"location":"appendix.html#constants","title":"Constants","text":""},{"location":"appendix.html#common","title":"Common","text":"Name Type Value Description CORE_EVENT_NUM_MAX UINT 50 Maximum number of events CORE_EVENT_DIR_MAX UINT 10 Maximum number of events in one directory EVENT_ADDITONAL_DATA_LEN UINT 100 Length of the event comment EXPORT_BUFFER UINT 500 Length of the buffer for the event export EXPORT_JOB_TITEL STRING[100] 'AssetInt Job Statistics Export File' Export file header EXPORT_SHIFT_TITEL STRING[100] 'AssetInt Shift Statistics Export File' Export file header EXPORT_TIMELINE_TITEL STRING[100] 'AssetInt Timeline Statistics Export File' Export file header EXPORT_JOB_HEADER STRING[400] 'Job Start Time;Job End Time;Job Name;...' Export file column headers EXPORT_SHIFT_HEADER STRING[400] 'Job Start Time;Job End Time;Job Name;...' Export file column headers EXPORT_TIMELINE_HEADER STRING[400] 'Start Time;Shift ID;Production State;...' Export file column headers UI_SHIFT_LIST_IDX UINT 8 Max index for list box entries for shift data UI_JOB_LIST_IDX UINT 8 Max index for list box entries for job data LOG_LEN UINT 100 Length of one log entry (minimum size is 50) LOG_NUM UINT 50 Number of log entries LOG_LEVEL exAssetIntLogLevelEnum exASSETINT_LOG_ALL Define log level details CHAR_RETURN USINT 13 Carriage return"},{"location":"appendix.html#errors","title":"Errors","text":"Name Type Value Description ERR_ASSET_LINK DINT -1064239102 Input exLink is 0 pointer ERR_ASSET_TEMP_MEMORY DINT -1064136704 No temporary memory available, make sure core function block is enabled ERR_ASSET_INF_WAIT_CORE_FB DINT 1083346949 This component can only become active if MpAssetIntCore is active. ERR_ASSET_READ_RECORD_SIZE DINT -2138009590 Record size is not correct during reading event data ERR_ASSET_READ_CRC DINT 100000 Record CRC error during reading event data ERR_ASSET_CONFIG DINT -1064239096 Configuration link is 0 pointer ERR_ASSET_SHIFT_CALC DINT -1064239097 Invalid shift configured"},{"location":"revision.html","title":"Revision","text":""},{"location":"revision.html#15052024","title":"15.05.2024","text":"<p>First release</p>"},{"location":"axis_cfg/axis_cfg.html","title":"Axis cfg","text":"<p>The axis configuration sample provides an example how to change a axis configuration during runtime. After changing the axis parameters the PLC must be reboot for the changes to take affect. The function block MC_BR_ProcessConfig used in this example does not check parameter values for correctness. It is therefore necessary to check the axis for errors after writing new parameters through the PLC logger or the function block MC_ReadAxisError.</p> <p>Also see </p> <ul> <li>Automation Studio help for a description of MC_BR_ProcessConfig (9c2eadae-8494-4e9a-b305-0afa2dabf1d4)</li> <li>Automation Studio help for a description of the axis parameter (18353d93-e907-436f-90d9-d2a80bd7f7ac)</li> </ul>"},{"location":"axis_cfg/axis_cfg.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"axis_cfg/axis_cfg.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Command Function CmdSetAxis Set the new axis parameters CmdGetAxis Get the active axis parameters CmdReboot Reboot PLC MpLink The axis reference establishes the connection between the function block and an axis ParAxis Axis parameters for set command StaAxis Axis parameters get command ErrId Error ID"},{"location":"axis_cfg/axis_cfg.html#program-structure","title":"Program structure","text":"The axis parameter can be outsourced into an extra file with just the axis parameters. This has the advantage that the axis configuration can be changed easily without changing any source code in the proto type.          <p>The program consists of a state machine to execute the commands. The B&amp;R function block that changed the axis configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_AXIS_CFG_PRE_SET. From this step the state machine goes to the read or write state. The axis parameter can be provided as a separate file or action (see example). It is also possible to set the parameters directly in the structure ParAxis.</p> <p>After changing the axis parameters the PLC must be reboot for the changes to take affect.</p>"},{"location":"axis_cfg/axis_cfg.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"axis_cfg/axis_cfg.html#program-init","title":"Program init","text":"<pre><code>PROGRAM _INIT\n    // --------------------------------------------------------------------------\n    // Axis configuration\n    AxisCfg.MpLink := ADR(gAxis_1);         // MpLink for axis\n    AxisConfigSample;                       // Axis sample configuration\n\nEND_PROGRAM\n</code></pre>"},{"location":"axis_cfg/axis_cfg.html#program-cyclic","title":"Program cyclic","text":"<pre><code>PROGRAM _CYCLIC\n    // --------------------------------------------------------------------------\n    // Call axis actions used for this drive\n    AxisCfgAction;      // Call axis configuration code\n\nEND_PROGRAM\n</code></pre>"},{"location":"axis_cfg/axis_cfg.html#revision","title":"Revision","text":"<p>Version 3</p> <ul> <li>Removed dependency from common</li> <li>New internal structure</li> </ul> <p>Version 2</p> <ul> <li>Renamed function block </li> <li>Don't read before write</li> <li>Minor tweaks</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"compatibility/compatibility.html","title":"Compatibility","text":"<p>The goal is to provide a community version that almost matches the official version. However this is not possible for some components. There is no AssetInt configuration file in Automation Studio under the configuration view. The configuration is done through code. This is similar to using the official function block MpAssetIntCoreConfig.</p> <p>For a general description of mappAssetInt see Automation Studio help </p> <ul> <li>(7f7c4218-cad1-406e-9c36-3e8b54e4c5c2) for a description of the offical mappAssetInt</li> </ul>"},{"location":"compatibility/compatibility.html#function-blocks-compared-to-the-official-version","title":"Function blocks compared to the official version","text":""},{"location":"compatibility/compatibility.html#mpassetintcore","title":"MpAssetIntCore","text":"<p>For constants used in the function block see constants.</p> Original New I/O Parameter Data type Description IN exLink Pointer to exAssetIntLinkType Remanent variable structure that contains short term data for cross function block communication. IN Enable BOOL The function block is active as long as this input is set. IN ErrorReset BOOL Resets function block errors. IN Parameters Pointer to <code>exAssetIntParType</code> Parameters of the function block. IN (NEW) Logger Pointer to STRING[LOG_LEN][0..LOG_NUM] String array for logger messages. IN (NEW) Configuration Pointer to <code>exAssetIntCoreConfigType</code> Structure used to specify the configuration. IN Update BOOL Updates the parameters on a rising edge of the input. IN Downtime <code>exAssetIntDowntimeEnum</code> Indicates downtime. IN DowntimeReason Pointer to STRING[50] Reason for the downtime. IN PieceCounter UDINT Number of products manufactured. IN RejectCounter UDINT Number of rejected products. IN DeviceName Pointer to STRING[50] File device (data storage medium) where the files are stored. IN Export BOOL Exports statistical data regarding overall equipment effectiveness. IN Reset BOOL Resets the data in the internal buffer. OUT Active BOOL Function Block active. OUT Error BOOL Error occurred during execution. OUT StatusID DINT Status information. OUT UpdateDone BOOL Parameter update completed. OUT CurrentProductionRate REAL Current production rate. OUT ScheduledDowntimeRate REAL Scheduled downtime rate. OUT UnscheduledDowntimeRate REAL Unscheduled downtime rate. OUT NominalProductionTimeRate REAL Production time rate at machine's nominal speed. OUT BadPieceRate REAL Rate of bad products. OUT ExportDone BOOL Export successfully executed by function block. OUT Info <code>exAssetIntCoreInfoType</code> Additional function block information."},{"location":"compatibility/compatibility.html#mpassetintcoreconfig","title":"MpAssetIntCoreConfig","text":"<p>For constants used in the function block see constants.</p> Original New I/O Parameter Data type Description IN exLink Pointer to exAssetIntLinkType Remanent variable structure that contains short term data for cross function block communication. configuration). IN Enable BOOL The function block is active as long as this input is set. IN ErrorReset BOOL Resets function block errors. IN (NEW) Device Name Pointer to STRING[50] File device (data storage medium) where the files are stored. IN (NEW) Logger Pointer to STRING[LOG_LEN][0..LOG_NUM] String array for logger messages. IN Configuration Pointer to <code>exAssetIntCoreConfigType</code> Structure used to specify the configuration. IN Load BOOL Loads the configuration of the component. IN Save BOOL Saves the configuration of the component. IN Active BOOL Function block active. OUT Error BOOL Error occurred during execution. OUT StatusID DINT Status information. OUT CommandDone BOOL Execution successful. Function block is finished. OUT Info Pointer to <code>exAssetIntInfoType</code> Additional function block information."},{"location":"conversion/conversion.html","title":"Conversion","text":"<p>This guide provides details how to convert the official mappAssetInt package to a community version.</p>"},{"location":"faq/faq.html","title":"FAQs","text":""},{"location":"faq/faq.html#faqs","title":"FAQs","text":""},{"location":"faq/faq.html#what-task-class-should-be-used","title":"What task class should be used?","text":"<p>It is recommended to use task class #8 with a 10ms cycle time.</p>"},{"location":"faq/faq.html#how-do-i-increase-the-number-of-events-stored","title":"How do I increase the number of events stored?","text":"<p>The constant <code>CORE_EVENT_NUM_MAX</code> defines the maximum number of events that can be stored. This number can be increased to store more events. Keep in mind that all events must be loaded on boot-up which can take some time. The constant <code>CORE_EVENT_DIR_MAX</code> defines the maximum number of events in one directory. Do not change this constant unless you know what you are doing.</p>"},{"location":"faq/faq.html#how-can-i-diagnose-a-problem-with-the-function-block","title":"How can I diagnose a problem with the function block?","text":"<p>Most function blocks have an additional Logger input. This logger provides detailed information about events that occur inside the framework. The log level can be set with the constant <code>LOG_LEVEL</code>. The default log level is <code>exASSETINT_LOG_ERROR</code>. The log level can be set to <code>exASSETINT_LOG_OFF</code> to disable logging. The log level can be set to <code>exASSETINT_LOG_ALL</code> to log everything. The log level can be set to <code>exASSETINT_LOG_INFO</code> to log errors, warnings, and information messages. The log level can be set to <code>exASSETINT_LOG_ALL</code> to log everything. Only use <code>exASSETINT_LOG_ALL</code> for debugging purposes as it can slow down the system.</p> <p>All functions blocks have an additional <code>StatusID</code> output. Check the appendix for the corresponding error numbers. </p> <p>Most function blocks have an additional <code>Info</code> output. This structure contains additional information about the function block. </p>"}]}